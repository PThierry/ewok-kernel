
package ewok.usart is
   with spark_mode => off
is

   procedure init
   is
   begin

#if CONFIG_KERNEL_NOSERIAL
      return;  
#end if;

      case CONFIG_KERNEL_USART is
         when 1 =>
            usart.name := "kusart1";
            usart.base_addr := 16#4001_1000#;
            usart.size := 16#400#;
            usart.interrupts(1).handler := USART1_IRQ_Handler;
         when 4 =>
            usart.name := "kusart4";
            usart.base_addr := 16#4001_1400#;
            usart.size := 16#400#;
            usart.interrupts(1).handler := USART4_IRQ_Handler;
         when 6 =>
            usart.name := "kusart6";
            usart.base_addr := 16#4000_4C00#;
            usart.size := 16#400#;
            usart.interrupts(1).handler := USART6_IRQ_Handler;
         when others => raise program_error;
      end case;

      usart.interrupt_num := 1;
      usart.interrupts(1).interrupt :=
         soc.usarts(CONFIG_KERNEL_USART).interrupt;

      usart.gpio_num := 2;

      usart.gpios(1).settings := (others => true);
      usart.gpios(1).kref  :=
        (soc.usarts(CONFIG_KERNEL_USART).port,
         soc.usarts(CONFIG_KERNEL_USART).tx_pin);
      usart.gpios(1).af    := soc.usarts(CONFIG_KERNEL_USART).af;
      usart.gpios(1).mode  := GPIO_AF;
      usart.gpios(1).speed := GPIO_VERY_HIGH_SPEED;
      usart.gpios(1).lck   := 0;

      usart.gpios(2).settings := (others => true);
      usart.gpios(2).kref  :=
        (soc.usarts(CONFIG_KERNEL_USART).port,
         soc.usarts(CONFIG_KERNEL_USART).rx_pin);
      usart.gpios(2).af    := soc.usarts(CONFIG_KERNEL_USART).af;
      usart.gpios(2).mode  := GPIO_AF;
      usart.gpios(2).speed := GPIO_VERY_HIGH_SPEED;
      usart.gpios(2).lck   := 0;

      declare
         descriptor : aliased integer;
      begin
         params(1) := usart'access;
         params(2) := descriptor'access;
   
         ewok.syscalls.init.svc_register_device
           (ID_KERNEL, params, TASK_MODE_MAINTHREAD);
      end;

   end init;

end ewok.usart;
